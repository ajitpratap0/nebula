Nebula Performance Bottleneck Analysis
=====================================

Timestamp: 2025-08-31T12:35:45+05:30
Summary: Found 2 bottlenecks: 1 critical, 1 high severity, 
Primary bottleneck: Memory growing at 1222.54 MB/s - potential memory leak (memory)

Bottlenecks:
-----------

1. [CRITICAL] Memory growing at 1222.54 MB/s - potential memory leak
   Type: memory
   Component: memory_allocator
   Impact: 12225.4%
   Suggestions:
   - Profile heap allocations to identify leak source
   - Check for unbounded data structures
   - Ensure proper cleanup of resources
   - Use object pools for frequently allocated objects
   Details:
   - duration: 49.093ms
   - growth_rate_mb_per_s: 1222.5446976314406
   - total_growth_mb: 60.01838684082031

2. [HIGH] GC overhead 15.4% - excessive garbage collection
   Type: gc
   Component: garbage_collector
   Impact: 15.4%
   Suggestions:
   - Reduce allocation rate
   - Use object pools
   - Pre-allocate slices with appropriate capacity
   - Consider using value types instead of pointers where appropriate
   - Profile allocations to identify high-frequency allocators
   Details:
   - gc_overhead_percent: 15.400032591204448
   - num_gc: 50
   - gc_pause_total_ms: 7
   - gc_pause_last_ms: 0

Prioritized Recommendations:
---------------------------
1. Profile heap allocations to identify leak source
2. Check for unbounded data structures
3. Ensure proper cleanup of resources
4. Use object pools for frequently allocated objects
5. Reduce allocation rate
6. Use object pools
7. Pre-allocate slices with appropriate capacity
8. Consider using value types instead of pointers where appropriate
9. Profile allocations to identify high-frequency allocators
